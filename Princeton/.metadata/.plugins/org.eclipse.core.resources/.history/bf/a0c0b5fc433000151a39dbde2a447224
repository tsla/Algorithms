import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;


public class KdTree {
	
	private Node root;
	private int _size = 0;
	
	
	private class Node
	{
		private boolean xOry; // true -> compare x value, false -> compare y value
		private Point2D point;
		private Node left = null;
		private Node right = null;
	}
	
	public KdTree()
	{
		
	}
	
	public boolean isEmpty()
	{
		return (_size == 0);
	}
	
	public int size()
	{
		return _size;
	}
	
	private boolean xOry = false;
	public void insert(Point2D p)
	{
		if (p == null)
			throw new NoSuchElementException();
		
		if (root == null)
		{
			root = new Node();
			root.point = p;
			root.xOry = true;
			
		}
		else
		{

			Node cur = root;
			
			while (true)
			{
				if (xOry)
				{
					if (p.x() < cur.point.x())
						cur = cur.left;
					else
						cur = cur.right;
				}
				else
				{
					if (p.y() < cur.point.y())
						cur = cur.left;
					else
						cur = cur.right;
				}
				
				if (cur == null)
				{
					cur = new Node();
					cur.point = p;
					cur.xOry = !xOry;
					break;
				}
				else
				{
					xOry = !xOry;
				}
					
			}
		}
		
		_size++;
	}
	
	public boolean contains(Point2D p)
	{
		if (p == null)
			throw new NoSuchElementException();
		
		return false;
	}
	
	public void draw()
	{
		int i = _size;
		Node cur = root;
		
		while (i-- > 0)
		{

		}
	}
	
	public Iterable<Point2D> range(RectHV rect)
	{
		final RectHV mRect =  rect;
		if (mRect == null)
			throw new NoSuchElementException();
		
		return new Iterable<Point2D>() {
			
			private SET<Point2D> set;
						
			@Override
			public Iterator<Point2D> iterator() {
				// TODO Auto-generated method stub
				
				set = new SET<Point2D>();
								
				return set.iterator();
			}
		};
	}
	
	
	public Point2D nearest(Point2D p)
	{
		if (p == null)
			throw new NoSuchElementException();
		
		Point2D ret = null;
		
		return ret;
	}
	
	 // level order traversal
	private List<Node> nodes = new ArrayList<Node>();
    public List<Node> flat() {
    	
    	if (root != null)
    	{
    		helper(root);
    	}
    	
    	return nodes;
    }
    
    private void helper(Node p)
    {
    	if (p.left != null)
    		helper(p.left);
    	
    	nodes.add(p);
    	
    	if (p.right != null)
    		helper(p.right);
    		
    }
    
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		KdTree tree = new KdTree();
		
		tree.insert(new Point2D(0.1,  0.1));
		tree.insert(new Point2D(0.5,  0.4));
		tree.insert(new Point2D(0.2,  0.2));
		tree.insert(new Point2D(0.5,  0.8));
		
		System.out.println(tree.size());
		
		System.out.println(tree.root.point);

		
	}
}
